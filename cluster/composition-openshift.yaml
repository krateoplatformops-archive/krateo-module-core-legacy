apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  #  name: demostacks.gcp-stack-template-plus.projectkerberus.io
  name: ocp.core.modules.krateo.io
  labels:
    platform: openshift
spec:
  #  writeConnectionSecretsToNamespace: crossplane-system
  writeConnectionSecretsToNamespace: krateo-system
  compositeTypeRef:
    #    apiVersion: gcp-stack-template-plus.projectkerberus.io/v1alpha1
    apiVersion: modules.krateo.io/v1alpha1
    #    kind: DemoStack
    kind: Core
  resources:
    - base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: ProviderConfig
        spec:
          credentials:
            source: InjectedIdentity
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-helm-providerconfig-incluster"
      readinessChecks:
        - type: None
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: ProviderConfig
        spec:
          credentials:
            source: InjectedIdentity
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
      readinessChecks:
        - type: None
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              kind: ArgoCD
              apiVersion: argoproj.io/v1alpha1
              metadata:
                # name: krateo-argocd
                namespace: krateo-system
              spec:
                controller:
                  resources:
                    limits:
                      cpu: 2000m
                      memory: 2048Mi
                    requests:
                      cpu: 250m
                      memory: 1024Mi
                dex:
                  openShiftOAuth: true
                  resources:
                    limits:
                      cpu: 500m
                      memory: 256Mi
                    requests:
                      cpu: 250m
                      memory: 128Mi
                ha:
                  enabled: false
                  resources:
                    limits:
                      cpu: 500m
                      memory: 256Mi
                    requests:
                      cpu: 250m
                      memory: 128Mi
                # rbac:
                #   defaultPolicy: ""
                #   policy: |
                #     g, system:cluster-admins, role:admin
                #   scopes: "[groups]"
                redis:
                  resources:
                    limits:
                      cpu: 500m
                      memory: 256Mi
                    requests:
                      cpu: 250m
                      memory: 128Mi
                repo:
                  resources:
                    limits:
                      cpu: 1000m
                      memory: 1024Mi
                    requests:
                      cpu: 250m
                      memory: 256Mi
                server:
                  rbacConfig:
                    policy.default: "role:admin"
                  config:
                    accounts.krateo-dashboard: apiKey, login
                    accounts.krateo-dashboard.enabled: "true"
                  resources:
                    limits:
                      cpu: 500m
                      memory: 256Mi
                    requests:
                      cpu: 125m
                      memory: 128Mi
                  route:
                    enabled: true
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-operator-argocd"
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-argocd"
        # - fromFieldPath: "spec.argo-cd.redis.securityContext"
        #   toFieldPath: "spec.forProvider.values.redis.securityContext"
        # - fromFieldPath: "spec.argo-cd.redis.securityContext.runAsNonRoot"
        #   toFieldPath: "spec.forProvider.values.redis.securityContext.runAsNonRoot"
        # - fromFieldPath: "spec.argo-cd.redis.securityContext.runAsUser"
        #   toFieldPath: "spec.forProvider.values.redis.securityContext.runAsUser"
    # - base:
    #     apiVersion: kubernetes.crossplane.io/v1alpha1
    #     kind: Object
    #     spec:
    #       forProvider:
    #         manifest:
    #           apiVersion: operators.coreos.com/v1
    #           kind: OperatorGroup
    #           metadata:
    #             name: openshift-gitops-operator
    #             namespace: openshift-operators
    #           spec:
    #             targetNamespaces:
    #             - krateo-system
    #   patches:
    #     - fromFieldPath: metadata.name
    #       toFieldPath: spec.providerConfigRef.name
    #       transforms:
    #         - type: string
    #           string:
    #             fmt: "%s-provider-k8s-providerconfig-incluster"
    #     - fromFieldPath: metadata.name
    #       toFieldPath: metadata.name
    #       transforms:
    #         - type: string
    #           string:
    #             fmt: "%s-krateo-argocd-operator-operatorgroup"
    # - base:
    #     apiVersion: kubernetes.crossplane.io/v1alpha1
    #     kind: Object
    #     spec:
    #       forProvider:
    #         manifest:
    #           apiVersion: operators.coreos.com/v1alpha1
    #           kind: Subscription
    #           metadata:
    #             name: krateo-openshift-gitops-operator
    #             namespace: openshift-operators
    #           spec:
    #             channel: stable
    #             name: openshift-gitops-operator
    #             source: redhat-operators
    #             sourceNamespace: openshift-marketplace
    #   patches:
    #     - fromFieldPath: metadata.name
    #       toFieldPath: spec.providerConfigRef.name
    #       transforms:
    #         - type: string
    #           string:
    #             fmt: "%s-provider-k8s-providerconfig-incluster"
    #     - fromFieldPath: metadata.name
    #       toFieldPath: metadata.name
    #       transforms:
    #         - type: string
    #           string:
    #             fmt: "%s-krateo-argocd-operator-subscription"
    - base:
        apiVersion: pkg.crossplane.io/v1alpha1
        kind: ControllerConfig
        spec:
          args:
            - --debug
          securityContext: {}
          podSecurityContext: {}
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-argocd-controllerconfig"
    - base:
        apiVersion: pkg.crossplane.io/v1
        kind: Provider
        metadata:
          name: provider-argocd
        spec:
          package: "ghcr.io/krateoplatformops/crossplane-provider-argocd-token:0.1.14"
          packagePullPolicy: Always
          # packagePullSecrets:
          #   - name: cr-token
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-argocd"
        - fromFieldPath: metadata.name
          toFieldPath: spec.controllerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-argocd-controllerconfig"
    - base:
        apiVersion: argocd.krateoplatformops.io/v1alpha1
        kind: ProviderConfig
        metadata:
          name: provider-argocd-providerconfig
        spec:
          serverUrl: https://krateo-module-core-argocd-server.krateo-system.svc:443
          credentials:
            source: Secret
            secretRef:
              namespace: krateo-system
              name: krateo-module-core-argocd-cluster
              key: admin.password
          debugClient: true
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-argocd-providerconfig"
        - fromFieldPath: metadata.name
          toFieldPath: spec.credentials.secretRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-argocd-cluster"
        - fromFieldPath: metadata.name
          toFieldPath: spec.serverUrl
          transforms:
            - type: string
              string:
                fmt: "https://%s-argocd-server.krateo-system.svc:443"
    # - base:
    #     apiVersion: v1
    #     kind: ConfigMap
    #     metadata:
    #       name: argocd-cm
    #       namespace: krateo-system
    #       labels:
    #         app.kubernetes.io/name: argocd-cm
    #         app.kubernetes.io/part-of: argocd
    #     data:
    #       # add an additional local user with apiKey and login capabilities
    #       #   apiKey - allows generating API keys
    #       #   login - allows to login using UI
    #       accounts.krateo-dashboard: apiKey, login
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: argocd-cm
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: argocd-cm
                  app.kubernetes.io/part-of: argocd
              data:
                # add an additional local user with apiKey and login capabilities
                #   apiKey - allows generating API keys
                #   login - allows to login using UI
                accounts.krateo-dashboard: apiKey, login
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-argocd-cm"
    - base:
        apiVersion: argocd.krateoplatformops.io/v1alpha1
        kind: Token
        metadata:
          name: krateo-dashboard-argocd-token
        spec:
          forProvider:
            expiresIn: 0s
            account: krateo-dashboard
            writeTokenSecretToRef:
              name: krateo-dashboard-argocd-token
              key: authToken
              namespace: krateo-system
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-argocd-providerconfig"
    - base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          forProvider:
            chart:
              name: krateo-dashboard
              repository: https://krateoplatformops.github.io/krateo-dashboard
              version: 0.3.113
            namespace: krateo-system
            set:
              - name: keptn.bridgeToken
                valueFrom:
                  secretKeyRef:
                    name: bridge-credentials
                    namespace: krateo-system
                    key: BASIC_AUTH_PASSWORD
              - name: keptn.apiToken
                valueFrom:
                  secretKeyRef:
                    name: keptn-api-token
                    namespace: krateo-system
                    key: keptn-api-token
            values:
              postgresql:
                volumePermissions:
                  enabled: false
                  securityContext:
                    runAsUser: "auto"
                securityContext:
                  enabled: false
                shmVolume:
                  chmod:
                    enabled: false
                containerSecurityContext:
                  enabled: false
              keptn:
                # bridge: http://api-gateway-nginx.krateo-system.svc/api/controlPlane/v1/
                #api: https://api-service.krateo-system.svc:8080/api/v1
                api: http://api-gateway-nginx.krateo-system.svc/api/

      patches:
        - fromFieldPath: "spec.krateo-dashboard.version"
          toFieldPath: "spec.forProvider.chart.version"
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-helm-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-krateodashboard"
        # - fromFieldPath: metadata.name
        #   toFieldPath: spec.forProvider.values.keptn.bridge
        #   transforms:
        #     - type: string
        #       string:
        #         #                fmt: "https://%s-keptn-bridge-service.krateo-system.svc:443"
        #         fmt: "https://bridge.krateo-system.svc:443/bridge/api"
        # - fromFieldPath: metadata.name
        #   toFieldPath: spec.forProvider.values.keptn.api
        #   transforms:
        #     - type: string
        #       string:
        #         #                fmt: "https://%s-keptn-api-service.krateo-system.svc:443"
        #         fmt: "https://api-service.krateo-system.svc:443/api/v1"
        - fromFieldPath: "spec.organization"
          toFieldPath: "spec.forProvider.values.organization"
        - fromFieldPath: "spec.frontendUrl"
          toFieldPath: "spec.forProvider.values.frontendUrl"
        - fromFieldPath: "spec.frontend.service.type"
          toFieldPath: "spec.forProvider.values.frontend.service.type"
        - fromFieldPath: "spec.backend.service.type"
          toFieldPath: "spec.forProvider.values.backend.service.type"
        - fromFieldPath: "spec.backendUrl"
          toFieldPath: "spec.forProvider.values.backendUrl"
        - fromFieldPath: "spec.sonarqube.token"
          toFieldPath: "spec.forProvider.values.sonarqube.token"
        - fromFieldPath: "spec.sonarqube.target"
          toFieldPath: "spec.forProvider.values.sonarqube.target"
        - fromFieldPath: "spec.grafana.target"
          toFieldPath: "spec.forProvider.values.grafana.target"
        - fromFieldPath: "spec.grafana.token"
          toFieldPath: "spec.forProvider.values.grafana.token"
        - fromFieldPath: "spec.prometheus.target"
          toFieldPath: "spec.forProvider.values.prometheus.target"
        - fromFieldPath: "spec.prometheus.token"
          toFieldPath: "spec.forProvider.values.prometheus.token"
        - fromFieldPath: "spec.providers.github.token"
          toFieldPath: "spec.forProvider.values.providers.github.token"
        - fromFieldPath: "spec.providers.github.clientId"
          toFieldPath: "spec.forProvider.values.providers.github.clientId"
        - fromFieldPath: "spec.providers.github.clientSecret"
          toFieldPath: "spec.forProvider.values.providers.github.clientSecret"
        # github enterprise
        - fromFieldPath: "spec.providers.github.enterprise.enabled"
          toFieldPath: "spec.forProvider.values.providers.github.enterprise.enabled"
        - fromFieldPath: "spec.providers.github.enterprise.url"
          toFieldPath: "spec.forProvider.values.providers.github.enterprise.url"
        # kubernetes
        - fromFieldPath: "spec.kubernetes.customResources"
          toFieldPath: "spec.forProvider.values.kubernetes.customResources"
        - fromFieldPath: "spec.kubernetes.clusters"
          toFieldPath: "spec.forProvider.values.kubernetes.clusters"
        - fromFieldPath: "spec.auth.github.token"
          toFieldPath: "spec.forProvider.values.auth.github.token"
        - fromFieldPath: "spec.auth.github.clientId"
          toFieldPath: "spec.forProvider.values.auth.github.clientId"
        - fromFieldPath: "spec.auth.github.clientSecret"
          toFieldPath: "spec.forProvider.values.auth.github.clientSecret"
        - fromFieldPath: "spec.ingress.annotations[kubernetes.io/ingress.class]"
          toFieldPath: "spec.forProvider.values.ingress.annotations[kubernetes.io/ingress.class]"
        - fromFieldPath: "spec.ingress.annotations[kubernetes.io/tls-acme]"
          toFieldPath: "spec.forProvider.values.ingress.annotations[kubernetes.io/tls-acme]"
        - fromFieldPath: "spec.ingress.annotations[ingress.kubernetes.io/force-ssl-redirect]"
          toFieldPath: "spec.forProvider.values.ingress.annotations[ingress.kubernetes.io/force-ssl-redirect]"
        - fromFieldPath: "spec.ingress.enabled"
          toFieldPath: "spec.forProvider.values.ingress.enabled"
        - fromFieldPath: "spec.ingress.tls.enabled"
          toFieldPath: "spec.forProvider.values.ingress.tls.enabled"
        - fromFieldPath: "spec.lighthouse.enabled"
          toFieldPath: "spec.forProvider.values.lighthouse.enabled"
        - fromFieldPath: "spec.krateo-dashboard.postgresql.persistence.enabled"
          toFieldPath: "spec.forProvider.values.postgresql.persistence.enabled"
        - fromFieldPath: "spec.krateo-dashboard.postgresql.persistence.existingClaim"
          toFieldPath: "spec.forProvider.values.postgresql.persistence.existingClaim"
        - fromFieldPath: "spec.krateo-dashboard.postgresql.persistence.mountPath"
          toFieldPath: "spec.forProvider.values.postgresql.persistence.mountPath"
        - fromFieldPath: "spec.krateo-dashboard.postgresql.persistence.subPath"
          toFieldPath: "spec.forProvider.values.postgresql.persistence.subPath"
        - fromFieldPath: "spec.krateo-dashboard.postgresql.persistence.storageClass"
          toFieldPath: "spec.forProvider.values.postgresql.persistence.storageClass"
        # - fromFieldPath: "spec.krateo-dashboard.postgresql.persistence.accessModes"
        #   toFieldPath: "spec.forProvider.values.postgresql.persistence.accessModes"
        - fromFieldPath: "spec.krateo-dashboard.postgresql.persistence.snapshotName"
          toFieldPath: "spec.forProvider.values.postgresql.persistence.snapshotName"
        - fromFieldPath: "spec.krateo-dashboard.postgresql.persistence.size"
          toFieldPath: "spec.forProvider.values.postgresql.persistence.size"
        - fromFieldPath: "spec.krateo-dashboard.postgresql.persistence.annotations"
          toFieldPath: "spec.forProvider.values.postgresql.persistence.annotations"
        - fromFieldPath: "spec.krateo-dashboard.postgresql.persistence.selector"
          toFieldPath: "spec.forProvider.values.postgresql.persistence.selector"
        - fromFieldPath: "spec.krateo-dashboard.postgresql.volumePermissions.enabled"
          toFieldPath: "spec.forProvider.values.postgresql.volumePermissions.enabled"
        - fromFieldPath: "spec.krateo-dashboard.postgresql.volumePermissions.securityContext.runAsUser"
          toFieldPath: "spec.forProvider.values.postgresql.volumePermissions.securityContext.runAsUser"
        - fromFieldPath: "spec.krateo-dashboard.postgresql.securityContext.enabled"
          toFieldPath: "spec.forProvider.values.postgresql.securityContext.enabled"
        - fromFieldPath: "spec.krateo-dashboard.postgresql.shmVolume.enabled"
          toFieldPath: "spec.forProvider.values.postgresql.shmVolume.enabled"
        - fromFieldPath: "spec.krateo-dashboard.postgresql.shmVolume.chmod.enabled"
          toFieldPath: "spec.forProvider.values.postgresql.shmVolume.chmod.enabled"
        - fromFieldPath: "spec.krateo-dashboard.postgresql.containerSecurityContext.enabled"
          toFieldPath: "spec.forProvider.values.postgresql.containerSecurityContext.enabled"
        # keptn
        # - fromFieldPath: "spec.krateo-dashboard.keptn.bridge"
        #   toFieldPath: "spec.forProvider.values.keptn.bridge"
        # - fromFieldPath: "spec.krateo-dashboard.keptn.api"
        #   toFieldPath: "spec.forProvider.values.keptn.api"
        # - fromFieldPath: "spec.krateo-dashboard.keptn.bridgeToken"
        #   toFieldPath: "spec.forProvider.values.keptn.bridgeToken"
        # - fromFieldPath: "spec.krateo-dashboard.keptn.apiToken"
        #   toFieldPath: "spec.forProvider.values.keptn.apiToken"
        # ldap
        - fromFieldPath: "spec.ldap.enabled"
          toFieldPath: "spec.forProvider.values.ldap.enabled"
        - fromFieldPath: "spec.ldap.secret"
          toFieldPath: "spec.forProvider.values.ldap.secret"
        - fromFieldPath: "spec.ldap.target"
          toFieldPath: "spec.forProvider.values.ldap.target"
        - fromFieldPath: "spec.ldap.bind.dn"
          toFieldPath: "spec.forProvider.values.ldap.bind.dn"
        - fromFieldPath: "spec.ldap.users.dn"
          toFieldPath: "spec.forProvider.values.ldap.users.dn"
        - fromFieldPath: "spec.ldap.users.options.filter"
          toFieldPath: "spec.forProvider.values.ldap.users.options.filter"
        - fromFieldPath: "spec.ldap.users.options.scope"
          toFieldPath: "spec.forProvider.values.ldap.users.options.scope"
        - fromFieldPath: "spec.ldap.users.map.description"
          toFieldPath: "spec.forProvider.values.ldap.users.map.description"
        - fromFieldPath: "spec.ldap.groups.dn"
          toFieldPath: "spec.forProvider.values.ldap.groups.dn"
        - fromFieldPath: "spec.ldap.groups.options.filter"
          toFieldPath: "spec.forProvider.values.ldap.groups.options.filter"
        - fromFieldPath: "spec.ldap.groups.options.scope"
          toFieldPath: "spec.forProvider.values.ldap.groups.options.scope"
        - fromFieldPath: "spec.krateo-dashboard.frontend.image.repository"
          toFieldPath: "spec.forProvider.values.frontend.image.repository"
        - fromFieldPath: "spec.krateo-dashboard.frontend.image.tag"
          toFieldPath: "spec.forProvider.values.frontend.image.tag"
        - fromFieldPath: "spec.krateo-dashboard.frontend.image.pullPolicy"
          toFieldPath: "spec.forProvider.values.frontend.image.pullPolicy"
        - fromFieldPath: "spec.krateo-dashboard.backend.image.repository"
          toFieldPath: "spec.forProvider.values.backend.image.repository"
        - fromFieldPath: "spec.krateo-dashboard.backend.image.tag"
          toFieldPath: "spec.forProvider.values.backend.image.tag"
        - fromFieldPath: "spec.krateo-dashboard.backend.image.pullPolicy"
          toFieldPath: "spec.forProvider.values.backend.image.pullPolicy"
        # oidc
        - fromFieldPath: "spec.auth.oidc.metadataUrl"
          toFieldPath: "spec.forProvider.values.auth.oidc.metadataUrl"
        - fromFieldPath: "spec.auth.oidc.clientId"
          toFieldPath: "spec.forProvider.values.auth.oidc.clientId"
        - fromFieldPath: "spec.auth.oidc.clientSecret"
          toFieldPath: "spec.forProvider.values.auth.oidc.clientSecret"
        - fromFieldPath: "spec.auth.oidc.authorizationUrl"
          toFieldPath: "spec.forProvider.values.auth.oidc.authorizationUrl"
        - fromFieldPath: "spec.auth.oidc.tokenUrl"
          toFieldPath: "spec.forProvider.values.auth.oidc.tokenUrl"
        - fromFieldPath: "spec.auth.oidc.tokenSignedResponseAlg"
          toFieldPath: "spec.forProvider.values.auth.oidc.tokenSignedResponseAlg"
        - fromFieldPath: "spec.auth.oidc.scope"
          toFieldPath: "spec.forProvider.values.auth.oidc.scope"
        - fromFieldPath: "spec.auth.oidc.prompt"
          toFieldPath: "spec.forProvider.values.auth.oidc.prompt"
        # session secret
        - fromFieldPath: "spec.auth.session.secret"
          toFieldPath: "spec.forProvider.values.auth.session.secret"
        # Jenkins integration
        - fromFieldPath: "spec.krateo-dashboard.jenkins.instances"
          toFieldPath: "spec.forProvider.values.jenkins.instances"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/charts/mongo/templates/serviceaccount.yaml
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                name: keptn-mongo
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: mongo
                  helm.sh/chart: mongo-10.26.4
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
              secrets:
                - name: keptn-mongo
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-sa-keptn-mongo"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                name: keptn-default
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-default
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-sa-keptn-default"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                name: keptn-configuration-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-configuration-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-sa-keptn-configuration-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                name: keptn-shipyard-controller
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-shipyard-controller
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-sa-keptn-shipyard-controller"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                name: keptn-secret-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-secret-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-sa-keptn-secret-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                name: keptn-lighthouse-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-lighthouse-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-sa-keptn-lighthouse-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                name: keptn-api-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-api-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-sa-keptn-api-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                name: keptn-webhook-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-api-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-sa-keptn-webhook-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/core.yaml
              apiVersion: v1
              kind: Secret
              metadata:
                name: keptn-api-token
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-api-token
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              type: Opaque
              data:
                keptn-api-token: "MzNXVzhqYmJ4cXphWGV5Vlh5YnJRampoN1ZxNjVac1dSY2NMaWgxUlJZdDh2"
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-secret-keptn-api-token"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/core.yaml
              apiVersion: v1
              kind: Secret
              metadata:
                name: bridge-credentials
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: bridge-credentials
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              type: Opaque
              data:
                BASIC_AUTH_USERNAME: "a2VwdG4="
                BASIC_AUTH_PASSWORD: "ZmRIOVpFWHVQM2E1aTNFMmpXcGw="
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-secret-bridge-credentials"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/core.yaml
              apiVersion: v1
              kind: Secret
              metadata:
                name: bridge-oauth
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: bridge-oauth
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              type: Opaque
              data:
                session_secret: "R2hPemdoN3VsdzRrbmxUeldnRzN5Ukw5YTc4V0pGTGRRemtwd0NxN0Mzd3dn"
                database_encrypt_secret: "TWdFZ2h4bFFiaURpZTNKM1N4TjBFbVFTSHNXV1o3eUk="
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-secret-bridge-oauth"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/core.yaml
              apiVersion: v1
              kind: Secret
              metadata:
                name: bridge-oauth-mongodb-credentials
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: bridge-oauth-mongodb-credentials
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              type: Opaque
              data:
                external_connection_string: ""
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-secret-bridge-oauth-mongodb-credentials"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/mongodb-credentials.yaml
              apiVersion: v1
              kind: Secret
              metadata:
                name: mongodb-credentials
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: mongodb-credentials
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              type: Opaque
              data:
                mongodb-user: "a2VwdG4="
                mongodb-password: "NmxKWXFSeFpNdzNMN2hhVFBPS08="
                mongodb-root-user: "YWRtaW4="
                mongodb-root-password: "QnVpd0dJOVhDSnZneVhqTlZ4Yk1CdzJ5TENDSUZXY2FOS0VMNXFnVlBQU2w4"
                external_connection_string: ""
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-secret-mongodb-credentials"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/charts/nats/templates/configmap.yaml
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: keptn-nats-cluster-config
                namespace: krateo-system
                labels:
                  app: keptn-nats-cluster
                  chart: nats-0.7.5
              data:
                nats.conf: |
                  # PID file shared with configuration reloader.
                  pid_file: "/var/run/nats/nats.pid"

                  ###############
                  #             #
                  # Monitoring  #
                  #             #
                  ###############
                  http: 8222
                  server_name: $POD_NAME
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-cm-keptn-nats-cluster-config"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/charts/nats/templates/configmap.yaml
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: keptn-nats-cluster-config
                namespace: krateo-system
                labels:
                  app: keptn-nats-cluster
                  chart: nats-0.7.5
              data:
                nats.conf: |
                  # PID file shared with configuration reloader.
                  pid_file: "/var/run/nats/nats.pid"

                  ###############
                  #             #
                  # Monitoring  #
                  #             #
                  ###############
                  http: 8222
                  server_name: $POD_NAME
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-cm-keptn-nats-cluster-config"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/api-gateway-nginx.yaml
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: api-nginx-config
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: api-nginx-config-cm
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              data:
                nginx.conf: |
                  worker_processes  3;
                  pid /tmp/nginx.pid;
                  error_log /dev/stdout info;
                  events {
                    worker_connections  10240;
                  }

                  http {
                    log_format  main
                            'remote_addr:$remote_addr\t'
                            'time_local:$time_local\t'
                            'method:$request_method\t'
                            'uri:$request_uri\t'
                            'host:$host\t'
                            'status:$status\t'
                            'bytes_sent:$body_bytes_sent\t'
                            'referer:$http_referer\t'
                            'useragent:$http_user_agent\t'
                            'forwardedfor:$http_x_forwarded_for\t'
                            'request_time:$request_time';
                    access_log /dev/stdout;
                    # rewrite_log on;
                    absolute_redirect off;

                    # remove nginx version
                    server_tokens off;

                    # https://www.nginx.com/blog/websocket-nginx/
                    map $http_upgrade $connection_upgrade {
                      default upgrade;
                      '' close;
                    }

                    map $http_x_forwarded_proto $forward_proto {
                      default $scheme;
                      https https;
                    }

                    server {
                        listen       8080;
                        server_name  _;

                        include /etc/nginx/keptn-endpoints-pre-0-7.conf;
                        include /etc/nginx/keptn-endpoints.conf;
                    }
                  }

                timeout.conf: |
                  proxy_connect_timeout 600;
                  proxy_send_timeout 600;
                  proxy_read_timeout 600;
                  send_timeout 600;

                keptn-endpoints.conf: |
                  rewrite ^/$ /bridge/ permanent;
                  rewrite ^/api$ /api/swagger-ui/ permanent;

                  # special configuration for /v1/auth to always use POST requests
                  location /api/v1/auth {
                    rewrite /api/v1/auth /v1/auth break;

                    proxy_method POST;
                    proxy_pass_request_body off;
                    proxy_pass http://api-service:8080;
                    proxy_http_version 1.1;
                    proxy_pass_request_headers on; # only pass request headers to this service
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  location ~* /bridge {
                    rewrite /bridge(/.*) $1 break;
                    proxy_pass http://bridge:8080;
                    proxy_http_version 1.1;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $forward_proto;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "Upgrade";
                    proxy_set_header Host $host;
                    proxy_buffer_size 128k;
                    proxy_buffers 4 256k;
                    proxy_busy_buffers_size 256k;
                  }

                  # health check
                  location /nginx-health {
                      access_log off;
                      return 200 "OK\n";
                  }

                  location /api/mongodb-datastore/swagger-ui/swagger.yaml {
                   # auth via backend (if the subrequest returns a 2xx response code, the access is allowed. If it returns 401 or 403,
                   # the access is denied) before we store the file
                   # see http://nginx.org/en/docs/http/ngx_http_auth_request_module.html
                    rewrite /api/mongodb-datastore/(.*) /$1  break;
                    proxy_pass         http://mongodb-datastore:8080;
                    proxy_redirect     off;
                    proxy_set_header   Host $host;
                    proxy_http_version 1.1;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  # block writing calls to /api/mongodb-datastore/event
                  location = /api/mongodb-datastore/event {
                    limit_except GET HEAD OPTIONS {
                      deny all;
                    }
                    auth_request               /api/v1/auth;
                    rewrite /api/mongodb-datastore/(.*) /$1  break;
                    proxy_pass         http://mongodb-datastore:8080;
                    proxy_redirect     off;
                    proxy_set_header   Host $host;
                    proxy_http_version 1.1;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  # block all calls to /api/mongodb-datastore/health
                  location = /api/mongodb-datastore/health {
                    deny all;
                  }

                  location  /api/mongodb-datastore {
                    # auth via backend (if the subrequest returns a 2xx response code, the access is allowed. If it returns 401 or 403,
                    # the access is denied) before we store the file
                    # see http://nginx.org/en/docs/http/ngx_http_auth_request_module.html
                    auth_request               /api/v1/auth;

                    rewrite /api/mongodb-datastore/(.*) /$1  break;
                    proxy_pass         http://mongodb-datastore:8080;
                    proxy_redirect     off;
                    proxy_set_header   Host $host;
                    proxy_http_version 1.1;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  location /api/controlPlane/swagger-ui/swagger.yaml {
                    # auth via backend (if the subrequest returns a 2xx response code, the access is allowed. If it returns 401 or 403,
                    # the access is denied) before we store the file
                    # see http://nginx.org/en/docs/http/ngx_http_auth_request_module.

                    rewrite /api/controlPlane/(.*) /$1  break;
                    proxy_pass         http://shipyard-controller:8080;
                    proxy_redirect     off;
                    proxy_set_header   Host $host;
                    proxy_http_version 1.1;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  # block DELETE calls to /api/controlplane/v1/log
                  location ~* /api/controlPlane/v1/log {
                    limit_except GET POST PUT PATCH OPTIONS HEAD {
                      deny all;
                    }
                    auth_request               /api/v1/auth;

                    rewrite /api/controlPlane/(.*) /$1  break;
                    proxy_pass         http://shipyard-controller:8080;
                    proxy_redirect     off;
                    proxy_set_header   Host $host;
                    proxy_http_version 1.1;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  location  /api/controlPlane {
                    # auth via backend (if the subrequest returns a 2xx response code, the access is allowed. If it returns 401 or 403,
                    # the access is denied) before we store the file
                    # see http://nginx.org/en/docs/http/ngx_http_auth_request_module.html
                    auth_request               /api/v1/auth;

                    rewrite /api/controlPlane/(.*) /$1  break;
                    proxy_pass         http://shipyard-controller:8080;
                    proxy_redirect     off;
                    proxy_set_header   Host $host;
                    proxy_http_version 1.1;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  location /api/secrets/swagger-ui/swagger.yaml {
                    # auth via backend (if the subrequest returns a 2xx response code, the access is allowed. If it returns 401 or 403,
                    # the access is denied) before we store the file
                    # see http://nginx.org/en/docs/http/ngx_http_auth_request_module.

                    rewrite /api/secrets/(.*) /$1  break;
                    proxy_pass         http://secret-service:8080;
                    proxy_redirect     off;
                    proxy_set_header   Host $host;
                    proxy_http_version 1.1;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  location  /api/secrets/ {
                    # auth via backend (if the subrequest returns a 2xx response code, the access is allowed. If it returns 401 or 403,
                    # the access is denied) before we store the file
                    # see http://nginx.org/en/docs/http/ngx_http_auth_request_module.html
                    auth_request               /api/v1/auth;

                    rewrite /api/secrets/(.*) /$1  break;
                    proxy_pass         http://secret-service:8080;
                    proxy_redirect     off;
                    proxy_set_header   Host $host;
                    proxy_http_version 1.1;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  location /api/statistics/swagger-ui/swagger.yaml {
                    # auth via backend (if the subrequest returns a 2xx response code, the access is allowed. If it returns 401 or 403,
                    # the access is denied) before we store the file
                    # see http://nginx.org/en/docs/http/ngx_http_auth_request_module.

                    rewrite /api/statistics/(.*) /$1  break;
                    proxy_pass         http://statistics-service:8080;
                    proxy_redirect     off;
                    proxy_set_header   Host $host;
                    proxy_http_version 1.1;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  # block all calls to /api/statistics/v1/event
                  location ~* /api/statistics/v1/event {
                    deny all;
                  }

                  location  /api/statistics {
                    # auth via backend (if the subrequest returns a 2xx response code, the access is allowed. If it returns 401 or 403,
                    # the access is denied) before we store the file
                    # see http://nginx.org/en/docs/http/ngx_http_auth_request_module.html
                    auth_request               /api/v1/auth;

                    rewrite /api/statistics/(.*) /$1  break;
                    proxy_pass         http://statistics-service:8080;
                    proxy_redirect     off;
                    proxy_set_header   Host $host;
                    proxy_http_version 1.1;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  location /api/configuration-service/swagger-ui/swagger.yaml {
                    # auth via backend (if the subrequest returns a 2xx response code, the access is allowed. If it returns 401 or 403,
                    # the access is denied) before we store the file
                    # see http://nginx.org/en/docs/http/ngx_http_auth_request_module.

                    rewrite /api/configuration-service/(.*) /$1  break;
                    proxy_pass         http://configuration-service:8080;
                    proxy_redirect     off;
                    proxy_set_header   Host $host;
                    proxy_http_version 1.1;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  # block /api/configuration-service/v1/project/*
                  location ~* /api/configuration-service/v1/project/([^/]*)/service/([^/]*)/resource/([^/]*)$ {
                    deny all;
                  }

                  # block /api/configuration-service/v1/project/*
                  location ~* /api/configuration-service/v1/project/([^/]*)/service/([^/]*)/resource$ {
                    deny all;
                  }

                  # block all calls to /project/*/stage/*/service/*
                  location ~* /api/configuration-service/v1/project/([^/]*)/stage/([^/]*)/service/([^/]*)$ {
                    deny all;
                  }

                  # block all calls to /project/*/stage/*/service
                  location ~* /api/configuration-service/v1/project/([^/]*)/stage/([^/]*)/service$ {
                    deny all;
                  }

                  # block all calls to /project/*/stage/*
                  location ~* /api/configuration-service/v1/project/([^/]*)/stage/([^/]*)$ {
                    deny all;
                  }

                  # block all calls to /project/*/stage
                  location ~* /api/configuration-service/v1/project/([^/]*)/stage$ {
                    deny all;
                  }

                  # block all calls to /project/*
                  location ~* /api/configuration-service/v1/project/([^/]*)$ {
                    deny all;
                  }

                  # block all calls to /project
                  location = /api/configuration-service/v1/project {
                    deny all;
                  }

                  location /api/configuration-service/  {
                    # auth via backend (if the subrequest returns a 2xx response code, the access is allowed. If it returns 401 or 403,
                    # the access is denied) before we store the file
                    # see http://nginx.org/en/docs/http/ngx_http_auth_request_module.html
                    auth_request               /api/v1/auth;

                    rewrite /api/configuration-service/(.*) /$1  break;
                    proxy_pass         http://configuration-service:8080;
                    proxy_redirect     off;
                    proxy_set_header   Host $host;
                    proxy_http_version 1.1;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  location /api {
                    rewrite /api/(.*) /$1 break;
                    rewrite /api / break;
                    proxy_pass http://api-service:8080;
                    proxy_http_version 1.1;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "Upgrade";
                    proxy_set_header Host $host;
                  }

                keptn-endpoints-pre-0-7.conf: |
                  rewrite ^/project/(.*) /bridge/project/$1 permanent;
                  rewrite ^/trace/(.*) /bridge/trace/$1 permanent;
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-cm-api-nginx-config"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/secret-service.yaml
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: secret-service-config
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: secret-service-config-cm
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              data:
                scopes.yaml: |
                  Scopes:
                    keptn-default:
                      Capabilities:
                        keptn-secrets-default-read:
                          Permissions:
                            - get
                    keptn-webhook-service:
                      Capabilities:
                        keptn-webhook-svc-read:
                          Permissions:
                            - get
                    dynatrace-service:
                      Capabilities:
                        keptn-dynatrace-svc-read:
                          Permissions:
                            - get
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-cm-secret-service-config"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/charts/mongo/templates/standalone/pvc.yaml
              kind: PersistentVolumeClaim
              apiVersion: v1
              metadata:
                name: keptn-mongo
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: mongo
                  helm.sh/chart: mongo-10.26.4
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/component: mongodb
              spec:
                accessModes:
                  - "ReadWriteOnce"
                resources:
                  requests:
                    storage: "8Gi"
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-pvc-keptn-mongo"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/configuration-service.yaml
              # resource-service
              apiVersion: v1
              kind: PersistentVolumeClaim
              metadata:
                name: configuration-volume
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: configuration-volume
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 100Mi
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-pvc-configuration-volume"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: rbac.authorization.k8s.io/v1
              kind: Role
              metadata:
                name: keptn-manage-secrets
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-manage-secrets
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              rules:
                - apiGroups:
                    - ""
                  resources:
                    - secrets
                  verbs:
                    - create
                    - get
                    - delete
                    - update
                    - list
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-role-keptn-manage-secrets"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: rbac.authorization.k8s.io/v1
              kind: Role
              metadata:
                name: keptn-get-secrets
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-get-secrets
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              rules:
                - apiGroups:
                    - ""
                  resources:
                    - secrets
                  verbs:
                    - get
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-role-keptn-get-secrets"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: rbac.authorization.k8s.io/v1
              kind: Role
              metadata:
                name: keptn-manage-roles
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-manage-roles
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              rules:
                - apiGroups:
                    - rbac.authorization.k8s.io
                  resources:
                    - roles
                  verbs:
                    - create
                    - get
                    - delete
                    - update
                    - deletecollection
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-role-keptn-manage-roles"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: rbac.authorization.k8s.io/v1
              kind: Role
              metadata:
                name: keptn-manage-rolebindings
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-manage-rolebindings
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              rules:
                - apiGroups:
                    - rbac.authorization.k8s.io
                  resources:
                    - rolebindings
                  verbs:
                    - create
                    - get
                    - delete
                    - update
                    - deletecollection
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-role-keptn-manage-rolebindings"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: rbac.authorization.k8s.io/v1
              kind: Role
              metadata:
                name: keptn-read-metadata
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-read-metadata
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              rules:
                - apiGroups:
                    - extensions
                    - apps
                  resources:
                    - deployments
                  verbs:
                    - get
                    - list
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-role-keptn-read-metadata"

    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: rbac.authorization.k8s.io/v1
              kind: Role
              metadata:
                name: keptn-manage-configmaps
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-manage-configmaps
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              rules:
                - apiGroups:
                    - ""
                  resources:
                    - configmaps
                  verbs:
                    - create
                    - update
                    - get
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-role-keptn-manage-configmaps"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: rbac.authorization.k8s.io/v1
              kind: Role
              metadata:
                name: keptn-delete-bridge-pod
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-delete-bridge-pod
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              rules:
                - apiGroups:
                    - ""
                  resources:
                    - pods
                  verbs:
                    - get
                    - delete
                    - deletecollection
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-role-keptn-delete-bridge-pod"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: rbac.authorization.k8s.io/v1
              kind: RoleBinding
              metadata:
                name: keptn-lighthouse-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-lighthouse-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: Role
                name: keptn-manage-configmaps
              subjects:
                - kind: ServiceAccount
                  name: keptn-lighthouse-service
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-rb-keptn-lighthouse-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: rbac.authorization.k8s.io/v1
              kind: RoleBinding
              metadata:
                name: keptn-api-service-metadata
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-api-service-metadata
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: Role
                name: keptn-read-metadata
              subjects:
                - kind: ServiceAccount
                  name: keptn-api-service
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-rb-keptn-api-service-metadata"

    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: rbac.authorization.k8s.io/v1
              kind: RoleBinding
              metadata:
                name: keptn-configuration-service-get-secrets
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-configuration-service-get-secrets
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: Role
                name: keptn-get-secrets
              subjects:
                - kind: ServiceAccount
                  name: keptn-configuration-service
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-rb-keptn-configuration-service-get-secrets"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: rbac.authorization.k8s.io/v1
              kind: RoleBinding
              metadata:
                name: keptn-shipyard-controller-manage-secrets
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-shipyard-controller-manage-secrets
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: Role
                name: keptn-manage-secrets
              subjects:
                - kind: ServiceAccount
                  name: keptn-shipyard-controller
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-rb-keptn-shipyard-controller-manage-secrets"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: rbac.authorization.k8s.io/v1
              kind: RoleBinding
              metadata:
                name: keptn-secret-service-manage-secrets
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-secret-service-manage-secrets
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: Role
                name: keptn-manage-secrets
              subjects:
                - kind: ServiceAccount
                  name: keptn-secret-service
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-rb-keptn-secret-service-manage-secrets"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: rbac.authorization.k8s.io/v1
              kind: RoleBinding
              metadata:
                name: keptn-secret-service-manage-roles
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-secret-service-manage-roles
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: Role
                name: keptn-manage-roles
              subjects:
                - kind: ServiceAccount
                  name: keptn-secret-service
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-rb-keptn-secret-service-manage-roles"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/rbac.yaml
              apiVersion: rbac.authorization.k8s.io/v1
              kind: RoleBinding
              metadata:
                name: keptn-secret-service-manage-rolebindings
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: keptn-secret-service-manage-secrets
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: Role
                name: keptn-manage-rolebindings
              subjects:
                - kind: ServiceAccount
                  name: keptn-secret-service
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-rb-keptn-secret-service-manage-rolebindings"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/charts/mongo/templates/standalone/svc.yaml
              apiVersion: v1
              kind: Service
              metadata:
                name: keptn-mongo
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: mongo
                  helm.sh/chart: mongo-10.26.4
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/component: mongodb
              spec:
                type: ClusterIP
                ports:
                  - name: mongodb
                    port: 27017
                    targetPort: mongodb
                    nodePort: null
                selector:
                  app.kubernetes.io/name: mongo
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/component: mongodb
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-svc-keptn-mongo"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/charts/nats/templates/service.yaml
              apiVersion: v1
              kind: Service
              metadata:
                name: keptn-nats-cluster
                namespace: krateo-system
                labels:
                  app: keptn-nats-cluster
                  chart: nats-0.7.5
              spec:
                selector:
                  app: keptn-nats-cluster
                clusterIP: None
                ports:
                  - name: client
                    port: 4222
                  - name: cluster
                    port: 6222
                  - name: monitor
                    port: 8222
                  - name: metrics
                    port: 7777
                  - name: leafnodes
                    port: 7422
                  - name: gateways
                    port: 7522
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-svc-keptn-nats-cluster"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/api-gateway-nginx.yaml
              apiVersion: v1
              kind: Service
              metadata:
                name: api-gateway-nginx
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: api-gateway-nginx
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              spec:
                type: ClusterIP
                ports:
                  - port: 80
                    name: http
                    targetPort: 8080
                    protocol: TCP
                selector:
                  app.kubernetes.io/name: api-gateway-nginx
                  app.kubernetes.io/instance: keptn
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-svc-api-gateway-nginx"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/api-service.yaml
              apiVersion: v1
              kind: Service
              metadata:
                name: api-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: api-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              spec:
                ports:
                  - port: 8080
                    name: http
                    targetPort: 8080
                    protocol: TCP
                selector:
                  app.kubernetes.io/name: api-service
                  app.kubernetes.io/instance: keptn
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-svc-keptn-api-service"
        # - fromFieldPath: metadata.name
        #   toFieldPath: spec.forProvider.manifest.metadata.name
        #   transforms:
        #     - type: string
        #       string:
        #         fmt: "%s-keptn-api-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/approval-service.yaml
              apiVersion: v1
              kind: Service
              metadata:
                name: approval-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: approval-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              spec:
                ports:
                  - port: 8080
                    protocol: TCP
                selector:
                  app.kubernetes.io/name: approval-service
                  app.kubernetes.io/instance: keptn
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-svc-approval-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/bridge.yaml
              apiVersion: v1
              kind: Service
              metadata:
                name: bridge
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: bridge
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              spec:
                ports:
                  - port: 8080
                    targetPort: 3000
                    protocol: TCP
                selector:
                  app.kubernetes.io/name: bridge
                  app.kubernetes.io/instance: keptn
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-svc-keptn-bridge-service"
        # - fromFieldPath: metadata.name
        #   toFieldPath: spec.forProvider.manifest.metadata.name
        #   transforms:
        #     - type: string
        #       string:
        #         fmt: "%s-keptn-bridge-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/configuration-service.yaml
              apiVersion: v1
              kind: Service
              metadata:
                name: configuration-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: configuration-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              spec:
                ports:
                  - port: 8080
                    targetPort: 8080
                    protocol: TCP
                selector:
                  app.kubernetes.io/name: configuration-service
                  app.kubernetes.io/instance: keptn
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-svc-configuration-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/continuous-operations.yaml
              apiVersion: v1
              kind: Service
              metadata:
                name: remediation-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: remediation-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              spec:
                ports:
                  - port: 8080
                    targetPort: 8080
                    protocol: TCP
                selector:
                  app.kubernetes.io/name: remediation-service
                  app.kubernetes.io/instance: keptn
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-svc-remediation-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/mongodb-datastore.yaml
              apiVersion: v1
              kind: Service
              metadata:
                name: mongodb-datastore
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: mongodb-datastore
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              spec:
                ports:
                  - port: 8080
                    protocol: TCP
                selector:
                  app.kubernetes.io/name: mongodb-datastore
                  app.kubernetes.io/instance: keptn
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-svc-mongodb-datastore"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/quality-gates.yaml
              apiVersion: v1
              kind: Service
              metadata:
                name: lighthouse-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: lighthouse-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              spec:
                ports:
                  - port: 8080
                    protocol: TCP
                selector:
                  app.kubernetes.io/name: lighthouse-service
                  app.kubernetes.io/instance: keptn
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-svc-lighthouse-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/secret-service.yaml
              apiVersion: v1
              kind: Service
              metadata:
                name: secret-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: secret-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              spec:
                ports:
                  - port: 8080
                    targetPort: 8080
                    protocol: TCP
                selector:
                  app.kubernetes.io/name: secret-service
                  app.kubernetes.io/instance: keptn
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-svc-secret-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/shipyard-controller.yaml
              apiVersion: v1
              kind: Service
              metadata:
                name: shipyard-controller
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: shipyard-controller
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              spec:
                ports:
                  - port: 8080
                    targetPort: 8080
                    protocol: TCP
                selector:
                  app.kubernetes.io/name: shipyard-controller
                  app.kubernetes.io/instance: keptn
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-svc-shipyard-controller"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/statistics-service.yaml
              apiVersion: v1
              kind: Service
              metadata:
                name: statistics-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: statistics-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              spec:
                ports:
                  - port: 8080
                    targetPort: 8080
                    protocol: TCP
                selector:
                  app.kubernetes.io/name: statistics-service
                  app.kubernetes.io/instance: keptn
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-svc-statistics-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/webhook-service.yaml
              apiVersion: v1
              kind: Service
              metadata:
                name: webhook-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: webhook-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  helm.sh/chart: control-plane-0.1.0
              spec:
                ports:
                  - port: 8080
                    protocol: TCP
                selector:
                  app.kubernetes.io/name: webhook-service
                  app.kubernetes.io/instance: keptn
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-svc-webhook-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/charts/mongo/templates/standalone/dep-sts.yaml
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: keptn-mongo
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: mongo
                  helm.sh/chart: mongo-10.26.4
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/component: mongodb
              spec:
                replicas: 1
                strategy:
                  type: Recreate
                selector:
                  matchLabels:
                    app.kubernetes.io/name: mongo
                    app.kubernetes.io/instance: keptn
                    app.kubernetes.io/component: mongodb
                template:
                  metadata:
                    labels:
                      app.kubernetes.io/name: mongo
                      helm.sh/chart: mongo-10.26.4
                      app.kubernetes.io/instance: keptn
                      app.kubernetes.io/managed-by: Helm
                      app.kubernetes.io/component: mongodb
                  spec:
                    serviceAccountName: keptn-mongo
                    affinity:
                      podAffinity:
                      podAntiAffinity:
                        preferredDuringSchedulingIgnoredDuringExecution:
                          - podAffinityTerm:
                              labelSelector:
                                matchLabels:
                                  app.kubernetes.io/name: mongo
                                  app.kubernetes.io/instance: keptn
                                  app.kubernetes.io/component: mongodb
                              namespaces:
                                - "krateo-system"
                              topologyKey: kubernetes.io/hostname
                            weight: 1
                      nodeAffinity:
                    securityContext: {}
                    containers:
                      - name: mongodb
                        image: docker.io/bitnami/mongodb:4.4.9-debian-10-r0
                        imagePullPolicy: "IfNotPresent"
                        securityContext: {}
                        env:
                          - name: BITNAMI_DEBUG
                            value: "false"
                          - name: MONGODB_USERNAME
                            value: "keptn"
                          - name: MONGODB_DATABASE
                            value: "keptn"
                          - name: MONGODB_PASSWORD
                            valueFrom:
                              secretKeyRef:
                                name: mongodb-credentials
                                key: mongodb-password
                          - name: MONGODB_ROOT_USER
                            value: "admin"
                          - name: MONGODB_ROOT_PASSWORD
                            valueFrom:
                              secretKeyRef:
                                name: mongodb-credentials
                                key: mongodb-root-password
                          - name: ALLOW_EMPTY_PASSWORD
                            value: "no"
                          - name: MONGODB_SYSTEM_LOG_VERBOSITY
                            value: "0"
                          - name: MONGODB_DISABLE_SYSTEM_LOG
                            value: "no"
                          - name: MONGODB_DISABLE_JAVASCRIPT
                            value: "no"
                          - name: MONGODB_ENABLE_JOURNAL
                            value: "yes"
                          - name: MONGODB_ENABLE_IPV6
                            value: "no"
                          - name: MONGODB_ENABLE_DIRECTORY_PER_DB
                            value: "no"
                        ports:
                          - name: mongodb
                            containerPort: 27017
                        livenessProbe:
                          exec:
                            command:
                              - mongo
                              - --disableImplicitSessions
                              - --eval
                              - "db.adminCommand('ping')"
                          initialDelaySeconds: 30
                          periodSeconds: 10
                          timeoutSeconds: 5
                          successThreshold: 1
                          failureThreshold: 6
                        readinessProbe:
                          exec:
                            command:
                              - bash
                              - -ec
                              - |
                                # Run the proper check depending on the version
                                [[ $(mongo --version | grep "MongoDB shell") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
                                . /opt/bitnami/scripts/libversion.sh
                                VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
                                VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
                                VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
                                if [[ "$VERSION_MAJOR" -ge 4 ]] && [[ "$VERSION_MINOR" -ge 4 ]] && [[ "$VERSION_PATCH" -ge 2 ]]; then
                                    mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
                                else
                                    mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep -q 'true'
                                fi
                          initialDelaySeconds: 5
                          periodSeconds: 10
                          timeoutSeconds: 5
                          successThreshold: 1
                          failureThreshold: 6
                        resources:
                          limits: {}
                          requests: {}
                        volumeMounts:
                          - name: datadir
                            mountPath: /bitnami/mongodb
                            subPath:
                    volumes:
                      - name: datadir
                        # emptyDir: {}
                        persistentVolumeClaim:
                          claimName: keptn-mongo
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-deployment-keptn-mongo"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/api-gateway-nginx.yaml
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: api-gateway-nginx
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: api-gateway-nginx
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  app.kubernetes.io/version: 1.21.6-alpine
                  helm.sh/chart: control-plane-0.1.0
              spec:
                selector:
                  matchLabels:
                    app.kubernetes.io/name: api-gateway-nginx
                    app.kubernetes.io/instance: keptn
                replicas: 1
                template:
                  metadata:
                    labels:
                      app.kubernetes.io/name: api-gateway-nginx
                      app.kubernetes.io/instance: keptn
                      app.kubernetes.io/managed-by: Helm
                      app.kubernetes.io/part-of: keptn-krateo-system
                      app.kubernetes.io/component: control-plane
                      app.kubernetes.io/version: 1.21.6-alpine
                      helm.sh/chart: control-plane-0.1.0
                    annotations: # add randomizer to restart the deployment if anything changes - see https://github.com/keptn/keptn/issues/3320
                      rollme: "D6rF8"
                  spec:
                    securityContext: {}
                    containers:
                      - name: api-gateway-nginx
                        image: docker.io/nginxinc/nginx-unprivileged:1.21.6-alpine
                        ports:
                          - containerPort: 8080
                        livenessProbe:
                          httpGet:
                            path: /nginx-health
                            port: 8080
                          initialDelaySeconds: 15
                          periodSeconds: 5
                        readinessProbe:
                          httpGet:
                            path: /nginx-health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        volumeMounts:
                          - mountPath: /etc/nginx/nginx.conf # mount api-nginx-config volume to /etc/nginx
                            subPath: nginx.conf
                            readOnly: true
                            name: api-nginx-config
                          - mountPath: /etc/nginx/keptn-endpoints.conf # mount api-nginx-config volume to /etc/nginx
                            subPath: keptn-endpoints.conf
                            readOnly: true
                            name: api-nginx-config
                          - mountPath: /etc/nginx/keptn-endpoints-pre-0-7.conf # mount api-nginx-config volume to /etc/nginx
                            subPath: keptn-endpoints-pre-0-7.conf
                            readOnly: true
                            name: api-nginx-config
                          - mountPath: /etc/nginx/keptn-endpoints-pre-1-0.conf # mount api-nginx-config volume to /etc/nginx
                            subPath: keptn-endpoints-pre-1-0.conf
                            readOnly: true
                            name: api-nginx-config
                        resources:
                          requests:
                            memory: "64Mi"
                            cpu: "50m"
                          limits:
                            memory: "128Mi"
                            cpu: "100m"
                        securityContext: {}
                    volumes:
                      - name: api-nginx-config
                        configMap:
                          name: api-nginx-config # place ConfigMap `api-nginx-config` on /etc/nginx
                    serviceAccountName: keptn-default
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-deployment-api-gateway-nginx"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/api-service.yaml
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: api-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: api-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  app.kubernetes.io/version: 0.13.1
                  helm.sh/chart: control-plane-0.1.0
              spec:
                selector:
                  matchLabels:
                    app.kubernetes.io/name: api-service
                    app.kubernetes.io/instance: keptn
                replicas: 1
                template:
                  metadata:
                    labels:
                      app.kubernetes.io/name: api-service
                      app.kubernetes.io/instance: keptn
                      app.kubernetes.io/managed-by: Helm
                      app.kubernetes.io/part-of: keptn-krateo-system
                      app.kubernetes.io/component: control-plane
                      app.kubernetes.io/version: 0.13.1
                      helm.sh/chart: control-plane-0.1.0
                  spec:
                    securityContext: {}
                    containers:
                      - name: api-service
                        image: docker.io/keptn/api:0.13.1
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        readinessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        imagePullPolicy: IfNotPresent
                        ports:
                          - containerPort: 8080
                        resources:
                          requests:
                            memory: "32Mi"
                            cpu: "50m"
                          limits:
                            memory: "64Mi"
                            cpu: "100m"
                        env:
                          - name: PREFIX_PATH
                            value: ""
                          - name: EVENTBROKER_URI
                            value: http://localhost:8081/event
                          - name: DATASTORE_URI
                            value: mongodb-datastore:8080
                          - name: CONFIGURATION_URI
                            value: configuration-service:8080
                          - name: SECRET_TOKEN
                            valueFrom:
                              secretKeyRef:
                                name: keptn-api-token
                                key: keptn-api-token
                          - name: POD_NAMESPACE
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.namespace
                          - name: MAX_AUTH_REQUESTS_PER_SECOND
                            value: "1.0"
                          - name: MAX_AUTH_REQUESTS_BURST
                            value: "2"
                          - name: LOG_LEVEL
                            value: info
                        securityContext: {}
                      - name: distributor
                        image: docker.io/keptn/distributor:0.13.1
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        readinessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 5
                          periodSeconds: 5
                        imagePullPolicy: IfNotPresent
                        ports:
                          - containerPort: 8080
                        resources:
                          requests:
                            memory: "16Mi"
                            cpu: "25m"
                          limits:
                            memory: "32Mi"
                            cpu: "100m"
                        env:
                          - name: PUBSUB_URL
                            value: "nats://keptn-nats-cluster"
                          - name: VERSION
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/version']
                          - name: DISTRIBUTOR_VERSION
                            value: 0.13.1
                          - name: LOCATION
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/component']
                          - name: K8S_DEPLOYMENT_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/name']
                          - name: K8S_POD_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.name
                          - name: K8S_NAMESPACE
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.namespace
                          - name: K8S_NODE_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: spec.nodeName
                          - name: PUBSUB_GROUP
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/name']
                          - name: OAUTH_CLIENT_ID
                            value: ""
                          - name: OAUTH_CLIENT_SECRET
                            value: ""
                          - name: OAUTH_DISCOVERY
                            value: ""
                          - name: OAUTH_TOKEN_URL
                            value: ""
                          - name: OAUTH_SCOPES
                            value: ""
                        securityContext: {}
                    serviceAccountName: keptn-api-service
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-deployment-api-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/approval-service.yaml
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: approval-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: approval-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  app.kubernetes.io/version: 0.13.1
                  helm.sh/chart: control-plane-0.1.0
              spec:
                selector:
                  matchLabels:
                    app.kubernetes.io/name: approval-service
                    app.kubernetes.io/instance: keptn
                replicas: 1
                template:
                  metadata:
                    labels:
                      app.kubernetes.io/name: approval-service
                      app.kubernetes.io/instance: keptn
                      app.kubernetes.io/managed-by: Helm
                      app.kubernetes.io/part-of: keptn-krateo-system
                      app.kubernetes.io/component: control-plane
                      app.kubernetes.io/version: 0.13.1
                      helm.sh/chart: control-plane-0.1.0
                  spec:
                    securityContext: {}
                    serviceAccountName: keptn-default
                    containers:
                      - name: approval-service
                        image: docker.io/keptn/approval-service:0.13.1
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        readinessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        imagePullPolicy: IfNotPresent
                        ports:
                          - containerPort: 8080
                        resources:
                          requests:
                            memory: "32Mi"
                            cpu: "25m"
                          limits:
                            memory: "128Mi"
                            cpu: "100m"
                        env:
                          - name: CONFIGURATION_SERVICE
                            value: "http://configuration-service:8080"
                          - name: EVENTBROKER
                            value: "http://localhost:8081/event"
                          - name: LOG_LEVEL
                            value: info
                        securityContext: {}
                      - name: distributor
                        image: docker.io/keptn/distributor:0.13.1
                        lifecycle:
                          preStop:
                            exec:
                              command: ["/bin/sleep", "20"]
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        readinessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 5
                          periodSeconds: 5
                        imagePullPolicy: IfNotPresent
                        ports:
                          - containerPort: 8080
                        resources:
                          requests:
                            memory: "16Mi"
                            cpu: "25m"
                          limits:
                            memory: "32Mi"
                            cpu: "100m"
                        env:
                          - name: PUBSUB_URL
                            value: "nats://keptn-nats-cluster"
                          - name: PUBSUB_TOPIC
                            value: "sh.keptn.event.approval.>"
                          - name: PUBSUB_RECIPIENT
                            value: "127.0.0.1"
                          - name: VERSION
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/version']
                          - name: DISTRIBUTOR_VERSION
                            value: 0.13.1
                          - name: LOCATION
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/component']
                          - name: K8S_DEPLOYMENT_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/name']
                          - name: K8S_POD_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.name
                          - name: K8S_NAMESPACE
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.namespace
                          - name: K8S_NODE_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: spec.nodeName
                          - name: PUBSUB_GROUP
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/name']
                          - name: OAUTH_CLIENT_ID
                            value: ""
                          - name: OAUTH_CLIENT_SECRET
                            value: ""
                          - name: OAUTH_DISCOVERY
                            value: ""
                          - name: OAUTH_TOKEN_URL
                            value: ""
                          - name: OAUTH_SCOPES
                            value: ""
                        securityContext: {}
                    terminationGracePeriodSeconds: 40
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-deployment-approval-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/configuration-service.yaml
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: configuration-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: configuration-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  app.kubernetes.io/version: 0.13.1
                  helm.sh/chart: control-plane-0.1.0
              spec:
                selector:
                  matchLabels:
                    app.kubernetes.io/name: configuration-service
                    app.kubernetes.io/instance: keptn
                replicas: 1
                # recreate the deployment if anything changes (we can not do a rolling upgrade of this deployment as we use a volume)
                strategy:
                  type: Recreate
                template:
                  metadata:
                    labels:
                      app.kubernetes.io/name: configuration-service
                      app.kubernetes.io/instance: keptn
                      app.kubernetes.io/managed-by: Helm
                      app.kubernetes.io/part-of: keptn-krateo-system
                      app.kubernetes.io/component: control-plane
                      app.kubernetes.io/version: 0.13.1
                      helm.sh/chart: control-plane-0.1.0
                  spec:
                    securityContext: {}
                    # initContainers:
                    #   - name: change-user-init
                    #     image: docker.io/keptn/configuration-service:0.13.1
                    #     securityContext: {}
                    #     volumeMounts:
                    #       - mountPath: /data/config
                    #         name: configuration-volume
                    #     command:
                    #       - sh
                    #       - -c
                    #       - chown -R 1001 /data/config
                    containers:
                      - name: configuration-service
                        image: docker.io/keptn/configuration-service:0.13.1
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        readinessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                        imagePullPolicy: IfNotPresent
                        env:
                          - name: PREFIX_PATH
                            value: ""
                          - name: POD_NAMESPACE
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.namespace
                          - name: DATASTORE_URI
                            value: mongodb-datastore:8080
                          - name: LOG_LEVEL
                            value: info
                          - name: GIT_KEPTN_EMAIL
                            value: "keptn@keptn.sh"
                          - name: GIT_KEPTN_USER
                            value: "keptn"
                        ports:
                          - containerPort: 8080
                        resources:
                          requests:
                            memory: "32Mi"
                            cpu: "25m"
                          limits:
                            memory: "64Mi"
                            cpu: "100m"
                        volumeMounts:
                          - mountPath: /data/config
                            name: configuration-volume
                        securityContext: {}
                    volumes:
                      - name: configuration-volume
                        # emptyDir: {}
                        persistentVolumeClaim:
                          claimName: configuration-volume
                    serviceAccountName: keptn-configuration-service
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-deployment-configuration-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/continuous-operations.yaml
              # remediation-service
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: remediation-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: remediation-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  app.kubernetes.io/version: 0.13.1
                  helm.sh/chart: control-plane-0.1.0
              spec:
                selector:
                  matchLabels:
                    app.kubernetes.io/name: remediation-service
                    app.kubernetes.io/instance: keptn
                replicas: 1
                template:
                  metadata:
                    labels:
                      app.kubernetes.io/name: remediation-service
                      app.kubernetes.io/instance: keptn
                      app.kubernetes.io/managed-by: Helm
                      app.kubernetes.io/part-of: keptn-krateo-system
                      app.kubernetes.io/component: control-plane
                      app.kubernetes.io/version: 0.13.1
                      helm.sh/chart: control-plane-0.1.0
                  spec:
                    securityContext: {}
                    containers:
                      - name: remediation-service
                        image: docker.io/keptn/remediation-service:0.13.1
                        imagePullPolicy: IfNotPresent
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        readinessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        ports:
                          - containerPort: 8080
                        resources:
                          requests:
                            memory: "64Mi"
                            cpu: "50m"
                          limits:
                            memory: "1Gi"
                            cpu: "200m"
                        env:
                          - name: EVENTBROKER
                            value: "http://localhost:8081/event"
                          - name: CONFIGURATION_SERVICE
                            value: "http://configuration-service:8080"
                          - name: ENVIRONMENT
                            value: "production"
                        securityContext: {}
                      - name: distributor
                        image: docker.io/keptn/distributor:0.13.1
                        lifecycle:
                          preStop:
                            exec:
                              command: ["/bin/sleep", "30"]
                        imagePullPolicy: IfNotPresent
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        readinessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 5
                          periodSeconds: 5
                        ports:
                          - containerPort: 8080
                        resources:
                          requests:
                            memory: "16Mi"
                            cpu: "25m"
                          limits:
                            memory: "32Mi"
                            cpu: "100m"
                        env:
                          - name: PUBSUB_URL
                            value: "nats://keptn-nats-cluster"
                          - name: PUBSUB_TOPIC
                            value: "sh.keptn.event.get-action.triggered"
                          - name: PUBSUB_RECIPIENT
                            value: "127.0.0.1"
                          - name: VERSION
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/version']
                          - name: DISTRIBUTOR_VERSION
                            value: 0.13.1
                          - name: LOCATION
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/component']
                          - name: K8S_DEPLOYMENT_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/name']
                          - name: K8S_POD_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.name
                          - name: K8S_NAMESPACE
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.namespace
                          - name: K8S_NODE_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: spec.nodeName
                          - name: PUBSUB_GROUP
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/name']
                          - name: OAUTH_CLIENT_ID
                            value: ""
                          - name: OAUTH_CLIENT_SECRET
                            value: ""
                          - name: OAUTH_DISCOVERY
                            value: ""
                          - name: OAUTH_TOKEN_URL
                            value: ""
                          - name: OAUTH_SCOPES
                            value: ""
                        securityContext: {}
                    serviceAccountName: keptn-default
                    terminationGracePeriodSeconds: 40
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-deployment-remediation-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/core.yaml
              # bridge
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: bridge
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: bridge
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  app.kubernetes.io/version: 0.13.1
                  helm.sh/chart: control-plane-0.1.0
              spec:
                selector:
                  matchLabels:
                    app.kubernetes.io/name: bridge
                    app.kubernetes.io/instance: keptn
                replicas: 1
                template:
                  metadata:
                    labels:
                      app.kubernetes.io/name: bridge
                      app.kubernetes.io/instance: keptn
                      app.kubernetes.io/managed-by: Helm
                      app.kubernetes.io/part-of: keptn-krateo-system
                      app.kubernetes.io/component: control-plane
                      app.kubernetes.io/version: 0.13.1
                      helm.sh/chart: control-plane-0.1.0
                  spec:
                    securityContext: {}
                    containers:
                      - name: bridge
                        image: docker.io/keptn/bridge2:0.13.1
                        imagePullPolicy: IfNotPresent
                        env:
                          - name: API_URL
                            value: "http://api-gateway-nginx/api"
                          - name: API_TOKEN
                            valueFrom:
                              secretKeyRef:
                                name: keptn-api-token
                                key: keptn-api-token
                          - name: CLI_DOWNLOAD_LINK
                            value: "https://github.com/keptn/keptn/releases/tag/0.13.1"
                          - name: INTEGRATIONS_PAGE_LINK
                            value: "https://get.keptn.sh/integrations.html"
                          - name: ENABLE_VERSION_CHECK
                            value: "true"
                          - name: SHOW_API_TOKEN
                            value: "true"
                          - name: KEPTN_INSTALLATION_TYPE
                            value: "QUALITY_GATES,CONTINUOUS_OPERATIONS"
                          - name: LOOK_AND_FEEL_URL
                            value: ""
                          - name: PREFIX_PATH
                            value: ""
                          - name: OAUTH_ENABLED
                            value: "false"
                          - name: OAUTH_DISCOVERY
                            value: ""
                          # Base URL e.g. https://example.com/
                          - name: OAUTH_BASE_URL
                            value: ""
                          - name: OAUTH_CLIENT_ID
                            value: ""
                          - name: OAUTH_CLIENT_SECRET
                            value: ""
                          # Token algorithm which is used for the ID token e.g. "RS256"
                          - name: OAUTH_ID_TOKEN_ALG
                            value: ""
                          # Additional scopes that should be added to the authentication flow (e.g. "profile email"), separated by space.
                          - name: OAUTH_SCOPE
                            value: ""
                          # User identifier property inside the ID token e.g. "name" or "email"
                          - name: OAUTH_NAME_PROPERTY
                            value: ""
                          - name: SECURE_COOKIE
                            value: "false"
                          # Session cookie timeout in minutes
                          - name: SESSION_TIMEOUT_MIN
                            value: ""
                          # Timeout of validation data (state, nonce, code verifier) during login
                          - name: SESSION_VALIDATING_TIMEOUT_MIN
                            value: ""
                          # Correlates to trust proxy number of hops as defined at http://expressjs.com/en/guide/behind-proxies.html
                          - name: TRUST_PROXY
                            value: ""
                          - name: MONGODB_HOST
                            value: "keptn-mongo:27017"
                          - name: MONGODB_USER
                            valueFrom:
                              secretKeyRef:
                                name: mongodb-credentials
                                key: mongodb-user
                          - name: MONGODB_PASSWORD
                            valueFrom:
                              secretKeyRef:
                                name: mongodb-credentials
                                key: mongodb-password
                          - name: MONGODB_DATABASE
                            value: keptn
                          - name: CONFIG_DIR
                            value: "/config"
                        envFrom:
                          - secretRef:
                              name: bridge-credentials
                              optional: true
                        ports:
                          - containerPort: 3000
                        resources:
                          requests:
                            memory: "64Mi"
                            cpu: "25m"
                          limits:
                            memory: "256Mi"
                            cpu: "200m"
                        volumeMounts:
                          - name: assets
                            mountPath: /usr/src/app/dist/assets/branding
                          - name: bridge-oauth
                            mountPath: /config/oauth
                            readOnly: true
                          - name: bridge-oauth-mongodb-credentials
                            mountPath: /config/oauth_mongodb
                        securityContext: {}
                    serviceAccountName: keptn-default
                    volumes:
                      - emptyDir: {}
                        name: assets
                      - name: bridge-oauth
                        secret:
                          secretName: bridge-oauth
                          defaultMode: 0400
                      - name: bridge-oauth-mongodb-credentials
                        secret:
                          secretName: bridge-oauth-mongodb-credentials
                          defaultMode: 0400
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-deployment-bridge"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/mongodb-datastore.yaml
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: mongodb-datastore
                namespace: krateo-system
                annotations:
                  fluentbit.io/exclude: "true"
                labels:
                  app.kubernetes.io/name: mongodb-datastore
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  app.kubernetes.io/version: 0.13.1
                  helm.sh/chart: control-plane-0.1.0
              spec:
                selector:
                  matchLabels:
                    app.kubernetes.io/name: mongodb-datastore
                    app.kubernetes.io/instance: keptn
                replicas: 1
                template:
                  metadata:
                    labels:
                      app.kubernetes.io/name: mongodb-datastore
                      app.kubernetes.io/instance: keptn
                      app.kubernetes.io/managed-by: Helm
                      app.kubernetes.io/part-of: keptn-krateo-system
                      app.kubernetes.io/component: control-plane
                      app.kubernetes.io/version: 0.13.1
                      helm.sh/chart: control-plane-0.1.0
                  spec:
                    securityContext: {}
                    serviceAccountName: keptn-default
                    containers:
                      - name: mongodb-datastore
                        image: docker.io/keptn/mongodb-datastore:0.13.1
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        readinessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        imagePullPolicy: IfNotPresent
                        ports:
                          - containerPort: 8080
                        resources:
                          requests:
                            memory: "32Mi"
                            cpu: "50m"
                          limits:
                            memory: "512Mi"
                            cpu: "300m"
                        env:
                          - name: PREFIX_PATH
                            value: ""
                          - name: MONGODB_HOST
                            value: "keptn-mongo:27017"
                          - name: MONGODB_DATABASE
                            value: keptn
                          - name: MONGODB_USER
                            valueFrom:
                              secretKeyRef:
                                name: mongodb-credentials
                                key: mongodb-user
                          - name: MONGODB_PASSWORD
                            valueFrom:
                              secretKeyRef:
                                name: mongodb-credentials
                                key: mongodb-password
                          - name: MONGODB_EXTERNAL_CONNECTION_STRING
                            valueFrom:
                              secretKeyRef:
                                name: mongodb-credentials
                                key: external_connection_string
                                optional: true
                          - name: LOG_LEVEL
                            value: info
                        securityContext: {}
                      - name: distributor
                        image: docker.io/keptn/distributor:0.13.1
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        readinessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 5
                          periodSeconds: 5
                        imagePullPolicy: IfNotPresent
                        ports:
                          - containerPort: 8080
                        resources:
                          requests:
                            memory: "16Mi"
                            cpu: "25m"
                          limits:
                            memory: "32Mi"
                            cpu: "100m"
                        env:
                          - name: PUBSUB_IMPL
                            value: nats
                          - name: PUBSUB_URL
                            value: "nats://keptn-nats-cluster"
                          - name: PUBSUB_TOPIC
                            value: "sh.keptn.>"
                          - name: PUBSUB_RECIPIENT
                            value: "127.0.0.1"
                          - name: PUBSUB_RECIPIENT_PATH
                            value: "/event"
                          - name: VERSION
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/version']
                          - name: DISTRIBUTOR_VERSION
                            value: 0.13.1
                          - name: LOCATION
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/component']
                          - name: K8S_DEPLOYMENT_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/name']
                          - name: K8S_POD_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.name
                          - name: K8S_NAMESPACE
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.namespace
                          - name: K8S_NODE_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: spec.nodeName
                          - name: PUBSUB_GROUP
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/name']
                          - name: OAUTH_CLIENT_ID
                            value: ""
                          - name: OAUTH_CLIENT_SECRET
                            value: ""
                          - name: OAUTH_DISCOVERY
                            value: ""
                          - name: OAUTH_TOKEN_URL
                            value: ""
                          - name: OAUTH_SCOPES
                            value: ""
                        securityContext: {}
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-deployment-mongodb-datastore"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/quality-gates.yaml
              # lighthouse-service
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: lighthouse-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: lighthouse-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  app.kubernetes.io/version: 0.13.1
                  helm.sh/chart: control-plane-0.1.0
              spec:
                selector:
                  matchLabels:
                    app.kubernetes.io/name: lighthouse-service
                    app.kubernetes.io/instance: keptn
                replicas: 1
                template:
                  metadata:
                    labels:
                      app.kubernetes.io/name: lighthouse-service
                      app.kubernetes.io/instance: keptn
                      app.kubernetes.io/managed-by: Helm
                      app.kubernetes.io/part-of: keptn-krateo-system
                      app.kubernetes.io/component: control-plane
                      app.kubernetes.io/version: 0.13.1
                      helm.sh/chart: control-plane-0.1.0
                  spec:
                    securityContext: {}
                    containers:
                      - name: lighthouse-service
                        image: docker.io/keptn/lighthouse-service:0.13.1
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        readinessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        imagePullPolicy: IfNotPresent
                        ports:
                          - containerPort: 8080
                        resources:
                          requests:
                            memory: "128Mi"
                            cpu: "50m"
                          limits:
                            memory: "1Gi"
                            cpu: "200m"
                        env:
                          - name: EVENTBROKER
                            value: "http://localhost:8081/event"
                          - name: CONFIGURATION_SERVICE
                            value: "http://configuration-service:8080"
                          - name: MONGODB_DATASTORE
                            value: "mongodb-datastore:8080"
                          - name: ENVIRONMENT
                            value: "production"
                          - name: POD_NAMESPACE
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.namespace
                          - name: LOG_LEVEL
                            value: info
                        securityContext: {}
                      - name: distributor
                        image: docker.io/keptn/distributor:0.13.1
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        readinessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 5
                          periodSeconds: 5
                        lifecycle:
                          preStop:
                            exec:
                              command: ["/bin/sleep", "20"]
                        imagePullPolicy: IfNotPresent
                        ports:
                          - containerPort: 8080
                        resources:
                          requests:
                            memory: "16Mi"
                            cpu: "25m"
                          limits:
                            memory: "32Mi"
                            cpu: "100m"
                        env:
                          - name: PUBSUB_URL
                            value: "nats://keptn-nats-cluster"
                          - name: PUBSUB_TOPIC
                            value: "sh.keptn.event.evaluation.triggered,sh.keptn.event.get-sli.finished,sh.keptn.event.monitoring.configure"
                          - name: PUBSUB_RECIPIENT
                            value: "127.0.0.1"
                          - name: VERSION
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/version']
                          - name: DISTRIBUTOR_VERSION
                            value: 0.13.1
                          - name: LOCATION
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/component']
                          - name: K8S_DEPLOYMENT_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/name']
                          - name: K8S_POD_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.name
                          - name: K8S_NAMESPACE
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.namespace
                          - name: K8S_NODE_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: spec.nodeName
                          - name: PUBSUB_GROUP
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/name']
                          - name: OAUTH_CLIENT_ID
                            value: ""
                          - name: OAUTH_CLIENT_SECRET
                            value: ""
                          - name: OAUTH_DISCOVERY
                            value: ""
                          - name: OAUTH_TOKEN_URL
                            value: ""
                          - name: OAUTH_SCOPES
                            value: ""
                        securityContext: {}
                    serviceAccountName: keptn-lighthouse-service
                    terminationGracePeriodSeconds: 40
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-deployment-lighthouse-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/secret-service.yaml
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: secret-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: secret-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  app.kubernetes.io/version: 0.13.1
                  helm.sh/chart: control-plane-0.1.0
              spec:
                selector:
                  matchLabels:
                    app.kubernetes.io/name: secret-service
                    app.kubernetes.io/instance: keptn
                replicas: 1
                # recreate the deployment if anything changes (we can not do a rolling upgrade of this deployment as we use a volume)
                strategy:
                  type: Recreate
                template:
                  metadata:
                    labels:
                      app.kubernetes.io/name: secret-service
                      app.kubernetes.io/instance: keptn
                      app.kubernetes.io/managed-by: Helm
                      app.kubernetes.io/part-of: keptn-krateo-system
                      app.kubernetes.io/component: control-plane
                      app.kubernetes.io/version: 0.13.1
                      helm.sh/chart: control-plane-0.1.0
                  spec:
                    securityContext: {}
                    serviceAccountName: keptn-secret-service
                    containers:
                      - name: secret-service
                        image: docker.io/keptn/secret-service:0.13.1
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        readinessProbe:
                          httpGet:
                            path: /v1/secret
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        imagePullPolicy: IfNotPresent
                        env:
                          - name: POD_NAMESPACE
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.namespace
                          - name: LOG_LEVEL
                            value: info
                        ports:
                          - containerPort: 8080
                        resources:
                          requests:
                            memory: "32Mi"
                            cpu: "25m"
                          limits:
                            memory: "64Mi"
                            cpu: "200m"
                        volumeMounts:
                          - mountPath: /data
                            name: secret-service-configmap-volume
                        securityContext: {}
                    volumes:
                      - name: secret-service-configmap-volume
                        configMap:
                          name: secret-service-config
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-deployment-secret-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/shipyard-controller.yaml
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: shipyard-controller
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: shipyard-controller
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  app.kubernetes.io/version: 0.13.1
                  helm.sh/chart: control-plane-0.1.0
              spec:
                selector:
                  matchLabels:
                    app.kubernetes.io/name: shipyard-controller
                    app.kubernetes.io/instance: keptn
                replicas: 1
                # recreate the deployment if anything changes (we can not do a rolling upgrade of this deployment as we use a volume)
                strategy:
                  type: Recreate
                template:
                  metadata:
                    labels:
                      app.kubernetes.io/name: shipyard-controller
                      app.kubernetes.io/instance: keptn
                      app.kubernetes.io/managed-by: Helm
                      app.kubernetes.io/part-of: keptn-krateo-system
                      app.kubernetes.io/component: control-plane
                      app.kubernetes.io/version: 0.13.1
                      helm.sh/chart: control-plane-0.1.0
                  spec:
                    securityContext: {}
                    serviceAccountName: keptn-shipyard-controller
                    containers:
                      - name: shipyard-controller
                        image: docker.io/keptn/shipyard-controller:0.13.1
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        readinessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                        imagePullPolicy: IfNotPresent
                        env:
                          - name: CONFIGURATION_SERVICE
                            value: "http://configuration-service:8080"
                          - name: EVENTBROKER
                            value: http://localhost:8081/event
                          - name: POD_NAMESPACE
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.namespace
                          - name: MONGODB_HOST
                            value: "keptn-mongo:27017"
                          - name: MONGODB_USER
                            valueFrom:
                              secretKeyRef:
                                name: mongodb-credentials
                                key: mongodb-user
                          - name: MONGODB_PASSWORD
                            valueFrom:
                              secretKeyRef:
                                name: mongodb-credentials
                                key: mongodb-password
                          - name: MONGODB_DATABASE
                            value: keptn
                          - name: MONGODB_EXTERNAL_CONNECTION_STRING
                            valueFrom:
                              secretKeyRef:
                                name: mongodb-credentials
                                key: external_connection_string
                                optional: true
                          - name: KEPTN_SPEC_VERSION
                            value: 0.2.4
                          - name: TASK_STARTED_WAIT_DURATION
                            value: 10m
                          - name: UNIFORM_INTEGRATION_TTL
                            value: 48h
                          - name: LOG_LEVEL
                            value: info
                        ports:
                          - containerPort: 8080
                        resources:
                          requests:
                            memory: "32Mi"
                            cpu: "50m"
                          limits:
                            memory: "128Mi"
                            cpu: "100m"
                        securityContext: {}
                      - name: distributor
                        lifecycle:
                          preStop:
                            exec:
                              command: ["/bin/sleep", "20"]
                        image: docker.io/keptn/distributor:0.13.1
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        readinessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 5
                          periodSeconds: 5
                        imagePullPolicy: IfNotPresent
                        ports:
                          - containerPort: 8080
                        resources:
                          requests:
                            memory: "16Mi"
                            cpu: "25m"
                          limits:
                            memory: "32Mi"
                            cpu: "100m"
                        env:
                          - name: PUBSUB_URL
                            value: "nats://keptn-nats-cluster"
                          - name: PUBSUB_TOPIC
                            value: "sh.keptn.>"
                          - name: PUBSUB_RECIPIENT
                            value: "127.0.0.1"
                          - name: PUBSUB_RECIPIENT_PATH
                            value: "/v1/event"
                          - name: DISABLE_REGISTRATION
                            value: "true"
                        securityContext: {}
                    terminationGracePeriodSeconds: 40
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-deployment-shipyard-controller"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/statistics-service.yaml
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: statistics-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: statistics-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  app.kubernetes.io/version: 0.13.1
                  helm.sh/chart: control-plane-0.1.0
              spec:
                selector:
                  matchLabels:
                    app.kubernetes.io/name: statistics-service
                    app.kubernetes.io/instance: keptn
                replicas: 1
                # recreate the deployment if anything changes (we can not do a rolling upgrade of this deployment as we use a volume)
                strategy:
                  type: Recreate
                template:
                  metadata:
                    labels:
                      app.kubernetes.io/name: statistics-service
                      app.kubernetes.io/instance: keptn
                      app.kubernetes.io/managed-by: Helm
                      app.kubernetes.io/part-of: keptn-krateo-system
                      app.kubernetes.io/component: control-plane
                      app.kubernetes.io/version: 0.13.1
                      helm.sh/chart: control-plane-0.1.0
                  spec:
                    securityContext: {}
                    serviceAccountName: keptn-default
                    containers:
                      - name: statistics-service
                        image: docker.io/keptn/statistics-service:0.13.1
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        readinessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                        imagePullPolicy: IfNotPresent
                        env:
                          - name: AGGREGATION_INTERVAL_SECONDS
                            value: "1800"
                          - name: NEXT_GEN_EVENTS
                            value: "true"
                          - name: MONGODB_HOST
                            value: "keptn-mongo:27017"
                          - name: MONGODB_USER
                            valueFrom:
                              secretKeyRef:
                                name: mongodb-credentials
                                key: mongodb-user
                          - name: MONGODB_PASSWORD
                            valueFrom:
                              secretKeyRef:
                                name: mongodb-credentials
                                key: mongodb-password
                          - name: MONGODB_DATABASE
                            value: keptn
                          - name: MONGODB_EXTERNAL_CONNECTION_STRING
                            valueFrom:
                              secretKeyRef:
                                name: mongodb-credentials
                                key: external_connection_string
                                optional: true
                          - name: LOG_LEVEL
                            value: info
                        ports:
                          - containerPort: 8080
                        resources:
                          requests:
                            memory: "32Mi"
                            cpu: "25m"
                          limits:
                            memory: "64Mi"
                            cpu: "100m"
                        securityContext: {}
                      - name: distributor
                        image: docker.io/keptn/distributor:0.13.1
                        lifecycle:
                          preStop:
                            exec:
                              command: ["/bin/sleep", "20"]
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        readinessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 5
                          periodSeconds: 5
                        imagePullPolicy: IfNotPresent
                        ports:
                          - containerPort: 8080
                        resources:
                          requests:
                            memory: "16Mi"
                            cpu: "25m"
                          limits:
                            memory: "32Mi"
                            cpu: "100m"
                        env:
                          - name: PUBSUB_URL
                            value: "nats://keptn-nats-cluster"
                          - name: PUBSUB_TOPIC
                            value: "sh.keptn.>"
                          - name: PUBSUB_RECIPIENT
                            value: "127.0.0.1"
                          - name: PUBSUB_RECIPIENT_PATH
                            value: "/v1/event"
                          - name: VERSION
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/version']
                          - name: DISTRIBUTOR_VERSION
                            value: 0.13.1
                          - name: LOCATION
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/component']
                          - name: K8S_DEPLOYMENT_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/name']
                          - name: K8S_POD_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.name
                          - name: K8S_NAMESPACE
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.namespace
                          - name: K8S_NODE_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: spec.nodeName
                          - name: PUBSUB_GROUP
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/name']
                          - name: OAUTH_CLIENT_ID
                            value: ""
                          - name: OAUTH_CLIENT_SECRET
                            value: ""
                          - name: OAUTH_DISCOVERY
                            value: ""
                          - name: OAUTH_TOKEN_URL
                            value: ""
                          - name: OAUTH_SCOPES
                            value: ""
                        securityContext: {}
                    terminationGracePeriodSeconds: 40
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-deployment-statistics-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/templates/webhook-service.yaml
              # webhook-service
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: webhook-service
                namespace: krateo-system
                labels:
                  app.kubernetes.io/name: webhook-service
                  app.kubernetes.io/instance: keptn
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/part-of: keptn-krateo-system
                  app.kubernetes.io/component: control-plane
                  app.kubernetes.io/version: 0.13.1
                  helm.sh/chart: control-plane-0.1.0
              spec:
                selector:
                  matchLabels:
                    app.kubernetes.io/name: webhook-service
                    app.kubernetes.io/instance: keptn
                replicas: 1
                # recreate the deployment if anything changes (we can not do a rolling upgrade of this deployment as we use a volume)
                strategy:
                  type: Recreate
                template:
                  metadata:
                    labels:
                      app.kubernetes.io/name: webhook-service
                      app.kubernetes.io/instance: keptn
                      app.kubernetes.io/managed-by: Helm
                      app.kubernetes.io/part-of: keptn-krateo-system
                      app.kubernetes.io/component: control-plane
                      app.kubernetes.io/version: 0.13.1
                      helm.sh/chart: control-plane-0.1.0
                  spec:
                    securityContext: {}
                    serviceAccountName: keptn-webhook-service
                    containers:
                      - name: webhook-service
                        image: docker.io/keptn/webhook-service:0.13.1
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        readinessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        imagePullPolicy: IfNotPresent
                        ports:
                          - containerPort: 8080
                        resources:
                          requests:
                            memory: "32Mi"
                            cpu: "25m"
                          limits:
                            memory: "64Mi"
                            cpu: "100m"
                        env:
                          - name: POD_NAMESPACE
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.namespace
                          - name: LOG_LEVEL
                            value: info
                        securityContext: {}
                      - name: distributor
                        image: docker.io/keptn/distributor:0.13.1
                        lifecycle:
                          preStop:
                            exec:
                              command: ["/bin/sleep", "20"]
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 10
                          periodSeconds: 5
                        readinessProbe:
                          httpGet:
                            path: /health
                            port: 8080
                          initialDelaySeconds: 5
                          periodSeconds: 5
                        imagePullPolicy: IfNotPresent
                        ports:
                          - containerPort: 8080
                        resources:
                          requests:
                            memory: "16Mi"
                            cpu: "25m"
                          limits:
                            memory: "32Mi"
                            cpu: "100m"
                        env:
                          - name: PUBSUB_URL
                            value: "nats://keptn-nats-cluster"
                          - name: PUBSUB_TOPIC
                            value: ""
                          - name: PUBSUB_RECIPIENT
                            value: "127.0.0.1"
                          - name: PUBSUB_RECIPIENT_PATH
                            value: "/v1/event"
                          - name: VERSION
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/version']
                          - name: DISTRIBUTOR_VERSION
                            value: 0.13.1
                          - name: LOCATION
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/component']
                          - name: K8S_DEPLOYMENT_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/name']
                          - name: K8S_POD_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.name
                          - name: K8S_NAMESPACE
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.namespace
                          - name: K8S_NODE_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: spec.nodeName
                          - name: PUBSUB_GROUP
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.labels['app.kubernetes.io/name']
                          - name: OAUTH_CLIENT_ID
                            value: ""
                          - name: OAUTH_CLIENT_SECRET
                            value: ""
                          - name: OAUTH_DISCOVERY
                            value: ""
                          - name: OAUTH_TOKEN_URL
                            value: ""
                          - name: OAUTH_SCOPES
                            value: ""
                        securityContext: {}
                    terminationGracePeriodSeconds: 40
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-deployment-webhook-service"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              # Source: keptn/charts/control-plane/charts/nats/templates/statefulset.yaml
              apiVersion: apps/v1
              kind: StatefulSet
              metadata:
                name: keptn-nats-cluster
                namespace: krateo-system
                labels:
                  app: keptn-nats-cluster
                  chart: nats-0.7.5
              spec:
                selector:
                  matchLabels:
                    app: keptn-nats-cluster
                replicas: 1
                serviceName: keptn-nats-cluster
                template:
                  metadata:
                    annotations:
                      prometheus.io/path: /metrics
                      prometheus.io/port: "7777"
                      prometheus.io/scrape: "true"
                    labels:
                      app: keptn-nats-cluster
                      chart: nats-0.7.5
                  spec:
                    # Common volumes for the containers.
                    volumes:
                      - name: config-volume
                        configMap:
                          name: keptn-nats-cluster-config

                      # Local volume shared with the reloader.
                      - name: pid
                        emptyDir: {}

                    #################
                    #               #
                    #  TLS Volumes  #
                    #               #
                    #################

                    # Required to be able to HUP signal and apply config
                    # reload to the server without restarting the pod.
                    shareProcessNamespace: true

                    #################
                    #               #
                    #  NATS Server  #
                    #               #
                    #################
                    terminationGracePeriodSeconds: 60
                    containers:
                      - name: nats
                        image: nats:2.1.9-alpine3.12
                        imagePullPolicy: IfNotPresent
                        resources: {}
                        ports:
                          - containerPort: 4222
                            name: client
                          - containerPort: 7422
                            name: leafnodes
                          - containerPort: 7522
                            name: gateways
                          - containerPort: 6222
                            name: cluster
                          - containerPort: 8222
                            name: monitor
                          - containerPort: 7777
                            name: metrics
                        command:
                          - "nats-server"
                          - "--config"
                          - "/etc/nats-config/nats.conf"

                        # Required to be able to define an environment variable
                        # that refers to other environment variables.  This env var
                        # is later used as part of the configuration file.
                        env:
                          - name: POD_NAME
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.name
                          - name: POD_NAMESPACE
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.namespace
                          - name: CLUSTER_ADVERTISE
                            value: $(POD_NAME).keptn-nats-cluster.$(POD_NAMESPACE).svc
                        volumeMounts:
                          - name: config-volume
                            mountPath: /etc/nats-config
                          - name: pid
                            mountPath: /var/run/nats

                        # Liveness/Readiness probes against the monitoring.
                        #
                        livenessProbe:
                          httpGet:
                            path: /
                            port: 8222
                          initialDelaySeconds: 10
                          timeoutSeconds: 5
                        readinessProbe:
                          httpGet:
                            path: /
                            port: 8222
                          initialDelaySeconds: 10
                          timeoutSeconds: 5

                        # Gracefully stop NATS Server on pod deletion or image upgrade.
                        #
                        lifecycle:
                          preStop:
                            exec:
                              # Using the alpine based NATS image, we add an extra sleep that is
                              # the same amount as the terminationGracePeriodSeconds to allow
                              # the NATS Server to gracefully terminate the client connections.
                              #
                              command:
                                - "/bin/sh"
                                - "-c"
                                - "nats-server -sl=ldm=/var/run/nats/nats.pid && /bin/sleep 60"

                      #################################
                      #                               #
                      #  NATS Configuration Reloader  #
                      #                               #
                      #################################

                      ##############################
                      #                            #
                      #  NATS Prometheus Exporter  #
                      #                            #
                      ##############################

                      - name: metrics
                        image: synadia/prometheus-nats-exporter:0.5.0
                        imagePullPolicy: IfNotPresent
                        args:
                          - -connz
                          - -routez
                          - -subz
                          - -varz
                          - -prefix=nats
                          - -use_internal_server_id
                          - http://localhost:8222/
                        ports:
                          - containerPort: 7777
                            name: metrics
                volumeClaimTemplates:
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-statefulset-keptn-nats-cluster"
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: networking.k8s.io/v1
              kind: Ingress
              metadata:
                name: api-keptn-ingress
                namespace: krateo-system
              spec:
                rules:
                  - host: keptn.apps.ocp4-lab.kiratech.lan
                    http:
                      paths:
                        - path: /
                          pathType: Prefix
                          backend:
                            service:
                              name: api-gateway-nginx
                              port:
                                number: 80
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-provider-k8s-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-ingress-api-keptn-ingress"
        - fromFieldPath: "spec.keptn.ingress.rules"
          toFieldPath: "spec.forProvider.manifest.spec.rules"
        - fromFieldPath: "spec.keptn.ingress.tls"
          toFieldPath: "spec.forProvider.manifest.spec.tls"
